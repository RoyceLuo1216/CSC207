Index: backend/src/schedule/Schedule.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package schedule;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\n\r\nimport EventEntity.Event;\r\n\r\n/**\r\n * Class representing a Schedule with a name, start and end time, and priority.\r\n * This Task can be part of a larger Event and represents a specific time block.\r\n */\r\n\r\npublic class Schedule {\r\n    private List<Event> events;\r\n\r\n    /**\r\n     * Constructor for the Schedule class.\r\n     */\r\n    public Schedule() {\r\n        this.events = new ArrayList<>();\r\n    }\r\n\r\n    /**\r\n     * Method to create a fixed event with specified start and end times.\r\n     * @param name              the name of the event\r\n     * @param priority     the priority of the event (on a scale of 1-5)\r\n     * @param dayStart          the date and time the event starts\r\n     * @param dayEnd            the date and time the event ends\r\n     * @return True             if the event was successfully added\r\n     */\r\n    public boolean createFixedEvent(String name, int priority, LocalDateTime dayStart,\r\n                                    LocalDateTime dayEnd) {\r\n\r\n        final FixedEvent event = new FixedEvent(dayStart, dayEnd, name, priority);\r\n        return events.add(event);\r\n    }\r\n\r\n    /**\r\n     * Method to create a flexible event that only specifies a time allocation.\r\n     * @param name              the name of the event\r\n     * @param priority     the priority of the event (on a scale of 1-5)\r\n     * @param dayStart          the date and time the event starts (i.e. monday, tuesday, etc.)\r\n     * @param dayEnd            the date and time the event ends\r\n     * @param timeAllocation    how many hours the event will take (over the course of dayStart and dayEnd)\r\n     * @return True             if the event was successfully added\r\n     */\r\n    public boolean createFlexibleEvent(String name, int priority, LocalDateTime dayStart,\r\n                                       LocalDateTime dayEnd, int timeAllocation) {\r\n        final FlexibleEvent event = new FlexibleEvent(name, priority, dayStart, dayEnd, timeAllocation);\r\n        return events.add(event);\r\n    }\r\n\r\n    /**\r\n     * Method to create a repeat event with specified start and end times.\r\n     * @param name              the name of the event\r\n     * @param priority     the priority of the event (on a scale of 1-5)\r\n     * @param dayStart          the date and time the event starts (i.e. monday, tuesday, etc.)\r\n     * @param dayEnd            the date and time the event ends\r\n     * @return True             if the event was successfully added\r\n     */\r\n    public boolean createRepeatEvent(String name, int priority, LocalDateTime dayStart,\r\n                                      LocalDateTime dayEnd) {\r\n        final RepeatEvent event = new RepeatEvent(name, priority, dayStart, dayEnd);\r\n        return events.add(event);\r\n    }\r\n\r\n    /**\r\n     * Method to delete an event by name.\r\n     * @param name      name of the event\r\n     * @return True     if the event was successfully deleted\r\n     */\r\n    public boolean deleteEvent(String name) {\r\n\r\n        return events.remove(name);\r\n    }\r\n\r\n    /**\r\n     * Method to automatically schedule events.\r\n     * @return True     if the event was successfully deleted\r\n     */\r\n    public boolean scheduleEvents() {\r\n        // Logic to schedule events\r\n        // API call\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Method to get all events in the schedule.\r\n     * @return a list of all the events currently in the schedule\r\n     */\r\n    public List<Event> getAllEvents() {\r\n        return events;\r\n    }\r\n\r\n    /**\r\n     * Method to find an event by its name.\r\n     * @param name the name of the event we want to find\r\n     * @return the event with the name or an empty Optional object if the event cannot be found\r\n     */\r\n    public Optional<Event> getEventByName(String name) {\r\n        Optional<Event> result = Optional.empty();\r\n        for (Event event : events) {\r\n            if (event.getEventName().equals(name)) {\r\n                result = Optional.of(event);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Method to find an event by a specific time.\r\n     * @param time      the date/time of the event we want to find\r\n     * @return the event scheduled at that time or an empty Optional object if the event cannot be found\r\n     */\r\n    public Optional<Event> getEventByTime(LocalDateTime time) {\r\n        Optional<Event> result = Optional.empty();\r\n        for (Event event : events) {\r\n            final LocalDateTime startDate = event.getDayStart();\r\n            final LocalDateTime endDate = event.getDayEnd();\r\n\r\n            if (startDate.isEqual(time) || endDate.isEqual(time)\r\n                    || startDate.isBefore(time) && (endDate.isAfter(time))) {\r\n                result = Optional.of(result);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}\r\n
===================================================================
diff --git a/backend/src/schedule/Schedule.java b/backend/src/schedule/Schedule.java
--- a/backend/src/schedule/Schedule.java	(revision 6d6160b1ff8bf17653e624eeb42b0211ba6c6b48)
+++ b/backend/src/schedule/Schedule.java	(date 1731301467680)
@@ -33,7 +33,7 @@
     public boolean createFixedEvent(String name, int priority, LocalDateTime dayStart,
                                     LocalDateTime dayEnd) {
 
-        final FixedEvent event = new FixedEvent(dayStart, dayEnd, name, priority);
+        final EventEntity.FixedEvent event = new EventEntity.FixedEvent(dayStart, dayEnd, name, priority);
         return events.add(event);
     }
 
Index: backend/src/entity/EventEntity/FixedEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package EventEntity;\r\n\r\nimport java.lang.reflect.Array;\r\nimport java.time.LocalDateTime;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n/**\r\n * A FixedEvent represents an event with a fixed start and end time, name, and priority.\r\n */\r\npublic class FixedEvent implements Event {\r\n\r\n    private LocalDateTime dayStart;\r\n    private LocalDateTime dayEnd;\r\n    private LocalDateTime timeStart;\r\n    private LocalDateTime timeEnd;\r\n    private String eventName;\r\n    private int priorityLabel;\r\n    private List<Task> tasks;\r\n\r\n    /**\r\n     * Constructor for the FixedEvent class.\r\n     *\r\n     * @param dayStart      the start date and time of the event\r\n     * @param dayEnd        the end date and time of the event\r\n     * @param eventName     the name of the event\r\n     * @param priorityLabel the priority label of the event\r\n     * @param timeStart      the start date and time of the event\r\n     * @param timeEnd        the end date and time of the event\r\n     */\r\n    public FixedEvent(LocalDateTime dayStart, LocalDateTime dayEnd, LocalDateTime timeStart, LocalDateTime timeEnd, String eventName, int priorityLabel) {\r\n        this.timeStart = timeStart;\r\n        this.timeEnd = timeEnd;\r\n        this.dayStart = dayStart;\r\n        this.dayEnd = dayEnd;\r\n        this.eventName = eventName;\r\n        this.priorityLabel = priorityLabel;\r\n        this.tasks = new ArrayList<>();\r\n    }\r\n\r\n    /**\r\n     * Gets the name of the event.\r\n     *\r\n     * @return the name of the event as a String.\r\n     */\r\n    @Override\r\n    public String setEventName() {\r\n        return this.eventName;\r\n    }\r\n\r\n\r\n    /**\r\n     * Gets the name of the event.\r\n     *\r\n     * @return the name of the event as a String.\r\n     */\r\n    @Override\r\n    public String getEventName() {\r\n        return this.eventName;\r\n    }\r\n\r\n    /**\r\n     * Sets the event name to a new value.\r\n     *\r\n     * @param eventName the new name for the event.\r\n     */\r\n    public void setEventName(String eventName) {\r\n        this.eventName = eventName;\r\n    }\r\n\r\n    /**\r\n     * Gets the start date and time of the event.\r\n     *\r\n     * @return the start time of the event as a LocalDateTime object.\r\n     */\r\n    @Override\r\n    public LocalDateTime getDayStart() {\r\n        return this.dayStart;\r\n    }\r\n\r\n    /**\r\n     * Sets the start day to another value.\r\n     *\r\n     * @param dayStart represents the new start day for this event.\r\n     */\r\n    public void setDayStart(LocalDateTime dayStart) {\r\n        this.dayStart = dayStart;\r\n    }\r\n\r\n    /**\r\n     * Gets the end date and time of the event.\r\n     *\r\n     * @return the end time of the event as a LocalDateTime object.\r\n     */\r\n    @Override\r\n    public LocalDateTime getDayEnd() {\r\n        return this.dayEnd;\r\n    }\r\n\r\n    /**\r\n     * Sets the end day to a new value.\r\n     *\r\n     * @param dayEnd represents the new end day for this event.\r\n     */\r\n    public void setDayEnd(LocalDateTime dayEnd) {\r\n        this.dayEnd = dayEnd;\r\n    }\r\n\r\n    /**\r\n     * Gets the priority label of the event.\r\n     *\r\n     * @return the priority label of the event as an integer.\r\n     */\r\n    @Override\r\n    public int getPriorityLabel() {\r\n        return this.priorityLabel;\r\n    }\r\n\r\n    /**\r\n     * Sets the priority label to a new value.\r\n     *\r\n     * @param priorityLabel the new priority label for this event.\r\n     */\r\n    public void setPriorityLabel(int priorityLabel) {\r\n        this.priorityLabel = priorityLabel;\r\n    }\r\n\r\n    /**\r\n     * Returns the list of tasks associated with the event.\r\n     *\r\n     * @return\r\n     */\r\n    @Override\r\n    public List<Task> getTasks() {\r\n        return this.tasks;\r\n    }\r\n\r\n    /**\r\n     * Adds a Task to the list\r\n     *\r\n     * @param task, task object to add to the event.\r\n     */\r\n    @Override\r\n    public void addTask(Task task) {\r\n        this.tasks.add(task);\r\n    }\r\n\r\n    /**\r\n     * Removes a task from the list.\r\n     *\r\n     * @param task, task object that gets removed.\r\n     */\r\n    @Override\r\n    public void removeTask(Task task) {\r\n        this.tasks.remove(task);\r\n    }\r\n\r\n}\r\n
===================================================================
diff --git a/backend/src/entity/EventEntity/FixedEvent.java b/backend/src/entity/EventEntity/FixedEvent.java
--- a/backend/src/entity/EventEntity/FixedEvent.java	(revision 6d6160b1ff8bf17653e624eeb42b0211ba6c6b48)
+++ b/backend/src/entity/EventEntity/FixedEvent.java	(date 1731301467686)
@@ -8,7 +8,7 @@
 /**
  * A FixedEvent represents an event with a fixed start and end time, name, and priority.
  */
-public class FixedEvent implements Event {
+public class FixedEvent implements EventEntity.Event {
 
     private LocalDateTime dayStart;
     private LocalDateTime dayEnd;
